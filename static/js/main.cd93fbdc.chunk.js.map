{"version":3,"sources":["Recording.js","components/Header.js","components/Footer.js","components/Button.js","components/App.js","serviceWorker.js","index.js"],"names":["styles","textAlign","margin","width","height","borderRadius","backgroundColor","padding","boxShadow","Recording","_ref","live","react_default","a","createElement","className","style","Header","Footer","Date","getFullYear","Button","props","value","onClick","handleClick","title","recognition","window","SpeechRecognition","webkitSpeechRecognition","interimResults","lang","maxAlternatives","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleListen","state","start","onend","stop","console","log","onstart","onresult","e","transcript","Array","from","results","map","result","join","isFinal","setState","prevState","textarea","concat","handleStart","handleStop","handleCopy","event","targetTextarea","document","querySelector","select","execCommand","handleClear","handleChange","_event$target","target","name","defineProperty","copied","components_Header","src_Recording","components_Button","onChange","components_Footer","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd93fbdc.chunk.js","sourcesContent":["import React from 'react';\n\nconst styles = {\n  textAlign: \"center\",\n  margin: \"2em auto\",\n  width: \"1vmin\",\n  height: \"1vmin\",\n  borderRadius: \"50%\",\n  backgroundColor: \"red\",\n  padding: \"1em\",\n  boxShadow: \"inset 0 0 10px 0 #9caab2, 0 0 15px 5px red\"\n}\n\nconst Recording = ({live}) => (\n  <div className={live ? `Recording pulse` : `Recording`} style={styles}>\n\n  </div>\n);\n\nexport default Recording;\n","import React from \"react\";\nimport './Header.css';\n\nfunction Header(){\n    return(\n        <header>\n        <h1 className=\"title\">Vext</h1>\n        </header>\n    )\n}\n\n\n\nexport default Header;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer (){\n    return(\n        <footer className=\"footer\">\n        <p>Copyright &copy; {new Date().getFullYear()} </p>\n        </footer>\n    )\n}\n\n\nexport default Footer;","import React from 'react';\nimport './Button.css';\n\nfunction Button(props){\n    return(\n<button value={props.value} onClick={props.handleClick} className={props.style}>\n    {props.title}\n    \n</button>\n    )\n}\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\nimport Recording from '../Recording.js';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Button from './Button';\n\n//----------WEB SPEECH API------------------\nvar SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n// initial set up\nvar recognition = new SpeechRecognition();\nrecognition.interimResults = true;\nrecognition.lang = 'en-US';\nrecognition.maxAlternatives = 1;\n// ------------------------------------------\n\n//---------Main Component-------------------\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      textarea: \"\",\n      copied: false,\n      live: false\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"App mounted. Proceed...\")\n  }\n\n  handleListen = () => {\n    if (this.state.live) {\n      recognition.start();\n      recognition.onend = () => {\n      recognition.start();\n      }\n    } else {\n      recognition.stop();\n      recognition.onend = () => {\n        console.log(\"Speech recognition stopped\");\n      }\n    }\n\n    recognition.onstart = () => {\n      console.log('Speech recognition service is Running...');\n    };\n\n    recognition.onresult = (e) => {\n      const transcript = Array.from(e.results)\n      .map(result => result[0])\n      .map(result => result.transcript)\n      .join('')\n\n      if (e.results[0].isFinal) {\n        this.setState(prevState => ({textarea: prevState.textarea !== \"\" ? prevState.textarea + \"\\n\" + transcript : transcript})); //\"*** NO SPEECH RECOGNIZED ***\"\n        console.log(`You said: ${transcript}`);\n      }\n    }\n\n  }\n\n\n  handleStart = () => {\n    this.setState({\n      live: true\n    }, this.handleListen)\n  }\n\n  handleStop = () => {\n    this.setState({\n      live: false\n    }, this.handleListen)\n  }\n\n  handleCopy = (event) => {\n    const targetTextarea = document.querySelector('.textarea');\n    if (targetTextarea.value !== \"\" ) {\n      targetTextarea.select();\n      document.execCommand('copy');\n      // event.target.focus();  //this make the focus set to the button and not the textarea (on mbile it's kinda akward..,)\n    }\n  }\n\n  handleClear = (event) => {\n    this.setState({\n      textarea: \"\"\n    })\n  }\n  // Method that will update both state and the textarea.value\n  handleChange = (event) => {\n    const {name, value} = event.target; //destructuring\n    this.setState(prevState => ({\n      [name]: value //calling \"name\" will make sure we target the right element\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main className=\"container\">\n        <div className=\"col-1\">\n\n        </div>\n          <div className=\"col-2\">\n            {\n              this.state.live\n                ? <Recording live={this.state.live}/>\n                : <h2 className=\"subTitle\">Speak your mind</h2>\n            }\n            {this.state.live?<Button style=\"stop\" title=\"Stop recording\" value=\"stop\" handleClick={this.handleStop}/>\n            :<Button style=\"start\" title=\"Start recording\" value=\"start\" handleClick={this.handleStart}/> \n            }\n            <br/>\n            <textarea className=\"textarea\" name=\"textarea\" onChange={this.handleChange} value={this.state.textarea}></textarea>\n            <br/>\n\n            <Button title=\"Clear\" style=\"btn\" handleClick={this.handleClear}/>\n            <Button  title=\"Copy text\" style=\"btn\" handleClick={this.handleCopy}/>\n          \n          </div>\n          <br/>\n        </main>\n         <Footer />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}